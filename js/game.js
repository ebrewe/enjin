// Generated by CoffeeScript 1.4.0
(function() {
  var Game, HUD, HUDElement, InputHandler, World,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {

    function Game(container, tileSize, _arg) {
      var paused, viewHeight, viewWidth, _ref;
      this.container = container;
      this.tileSize = tileSize;
      _ref = _arg != null ? _arg : {}, viewHeight = _ref.viewHeight, viewWidth = _ref.viewWidth;
      this.tick = __bind(this.tick, this);

      this.viewHeight = viewHeight != null ? viewHeight : 400;
      this.viewWidth = viewWidth != null ? viewWidth : 600;
      this.tileHeight = this.tileSize;
      this.tileWidth = this.tileSize * 2;
      this.levels = [];
      this.level = 0;
      paused = false;
    }

    Game.prototype.start = function() {
      this.setup();
      this.then = Date.now();
      return setInterval(this.tick, 60);
    };

    Game.prototype.setup = function() {
      this.world = new World(this.container, this.tileWidth, this.tileHeight, this.viewWidth, this.viewHeight);
      return this.inputHandler = new InputHandler(this.world);
    };

    Game.prototype.update = function(options) {
      var updates;
      updates = options != null ? options : false;
      this.inputHandler.update();
      return this.world.update(updates);
    };

    Game.prototype.tick = function() {
      var updates;
      this.now = Date.now();
      this.twixt = this.now - this.then;
      this.then = this.now;
      updates = {
        hud: {
          frameRate: this.twixt
        }
      };
      return this.update(updates);
    };

    Game.prototype.initiate = function(levels) {
      var _this = this;
      this.levels = levels != null ? levels : [];
      $(this.world.el).on('mousedown', function() {
        _this.inputHandler.mouseDown = true;
        return _this.inputHandler.startClick = _this.then;
      });
      return $(this.world.el).on('mouseup', function() {
        return _this.inputHandler.endDrag();
      });
    };

    return Game;

  })();

  /*
  ******************************
  THE GREAT WORLD CLASS
  ******************************
  */


  World = (function() {

    World.prototype.scene = [];

    World.prototype.sprites = [];

    World.prototype.background = false;

    World.prototype.defaultScroll = {
      x: 0,
      y: 0
    };

    function World(container, tileWidth, tileHeight, w, h, _arg) {
      var scrollX, scrollY, _ref;
      this.container = container;
      this.tileWidth = tileWidth;
      this.tileHeight = tileHeight;
      this.w = w;
      this.h = h;
      _ref = _arg != null ? _arg : {}, scrollX = _ref.scrollX, scrollY = _ref.scrollY;
      this.scrollX = scrollX != null ? scrollX : 0;
      this.scrollY = scrollY != null ? scrollY : 0;
      this.defaultScrollX = scrollX != null ? scrollX : 0;
      this.defaultScrollY = scrollY != null ? scrollY : 0;
      this.quickScroll = false;
      this.objects = [];
      this.entities = [];
      this.square = false;
      this.createWorld();
      this.createHUD();
    }

    World.prototype.createWorld = function() {
      this.el = this.container;
      return $(this.el).css({
        'display': 'block',
        'position': 'relative',
        'width': '90%',
        'height': this.h + 'px'
      }).attr('data-dragging', 'false');
    };

    World.prototype.createHUD = function() {
      var elements, options;
      elements = ['frames'];
      options = [];
      return this.hud = new HUD(this.container, {
        elements: elements,
        options: options
      });
    };

    World.prototype.update = function(updates) {
      var hupdates, _ref;
      hupdates = (_ref = updates.hud) != null ? _ref : {};
      if (hupdates.frameRate) {
        return this.hud.elements.frames.update(hupdates.frameRate);
      }
    };

    return World;

  })();

  InputHandler = (function() {

    InputHandler.prototype.keysPressed = [];

    InputHandler.prototype.clicked = false;

    InputHandler.prototype.mousePos = {};

    InputHandler.prototype.mouseDown = false;

    InputHandler.prototype.dragging = false;

    InputHandler.prototype.dragStart = {};

    function InputHandler(world) {
      this.world = world;
      this.bindMouse = __bind(this.bindMouse, this);

      this.bindMouse();
    }

    InputHandler.prototype.bindMouse = function() {
      var that;
      that = this;
      return document.addEventListener('mousemove', function(evt) {
        return that.mousePos = that.getMousePos(evt);
      });
    };

    InputHandler.prototype.getMousePos = function(evt) {
      var rect, wScrollX, wScrollY;
      rect = this.world.el;
      wScrollX = $('body').scrollLeft();
      wScrollY = $('body').scrollTop();
      return {
        x: evt.clientX - $(rect).offset().left - this.world.scrollX,
        y: evt.clientY - $(rect).offset().top + wScrollY - this.world.scrollY
      };
    };

    InputHandler.prototype.update = function() {
      var dX, dY;
      if (this.mouseDown) {
        this.checkDrag();
      }
      if (this.dragging) {
        dX = (this.mousePos.x - this.world.scrollX) - (this.dragStart.x - this.world.scrollX);
        return dY = (this.mousePos.y - this.world.scrollY) - (this.dragStart.y - this.world.scrollY);
      }
    };

    InputHandler.prototype.checkDrag = function() {
      var holding, now;
      now = new Date();
      holding = now - this.clickStart;
      if (holding >= 200) {
        this.dragging = true;
        return true;
      }
      return false;
    };

    InputHandler.prototype.startClick = function(time) {
      this.clickStart = time;
      return this.dragStart = {
        x: this.mousePos.x,
        y: this.mousePos.y
      };
    };

    InputHandler.prototype.endDrag = function() {
      this.mouseDown = false;
      return this.dragging = false;
    };

    return InputHandler;

  })();

  HUD = (function() {

    HUD.prototype.elements = {};

    function HUD(container, _arg) {
      var element, elements, options, _i, _len, _ref;
      _ref = _arg != null ? _arg : {}, elements = _ref.elements, options = _ref.options;
      this.parent = container;
      HUD = document.createElement('div');
      HUD.setAttribute('id', 'game_hud');
      this.parent.appendChild(HUD);
      this.el = HUD;
      $(this.el).css({
        'display': 'block',
        'position': 'absolute',
        'top': 0,
        'left': 0,
        'width': $(this.parent).width(),
        'height': $(this.parent).height()
      });
      if (elements) {
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          element = elements[_i];
          this.createElement(element);
        }
      }
    }

    HUD.prototype.createElement = function(element) {
      var el;
      el = new HUDElement(element, this.el);
      return this.elements[element] = el;
    };

    return HUD;

  })();

  HUDElement = (function() {

    function HUDElement(element, hud) {
      var el;
      console.log(element, hud);
      el = document.createElement('div');
      el.setAttribute('id', element);
      hud.appendChild(el);
      this.el = el;
    }

    HUDElement.prototype.update = function(updateVal) {
      return this.el.innerHTML = updateVal;
    };

    return HUDElement;

  })();

  window.onload = function() {
    var game, gameContainer;
    console.log('starting');
    gameContainer = document.getElementById('game');
    game = new Game(gameContainer, 44);
    return game.start();
  };

}).call(this);
